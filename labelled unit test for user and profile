/**Unit test
* 
@ Author Leonard Sanchez <Suavelen69@gmail.com>
/**
 <?php
//  require the SimpleTest 
require_once("/usr/lib/php5/simpletest/autorun.php");

// require the class needing to be tested
require_once("../php/user.php");

// the UserTest is a container for all our tests
class UserTest extends UnitTestCase {
	// variable to hold the mySQL connection
	private $mysqli = null;
	// variable to hold the test database row
	private $user   = null;

	// a few variables for creating test data
	private $EMAIL      = "unit-test@example.net";
	private $PASSWORD   = "TRXLOVERS";
	private $SALT       = null;
	private $AUTH_TOKEN = null;
	private $HASH       = null;
	
	// public function is used to connect to mySQL and to calculate the salt, hash, and authenticationToken
	public function setUp() {
		// connect to mySQL
		mysqli_report(MYSQLI_REPORT_STRICT);
		$this->mysqli = new mysqli("localhost", "store_dylan", "deepdive", "store_dylan");

		// randomize the salt, hash, and authentication token
		$this->SALT       = bin2hex(openssl_random_pseudo_bytes(32));
		$this->AUTH_TOKEN = bin2hex(openssl_random_pseudo_bytes(16));
		$this->HASH       = hash_pbkdf2("sha512", $this->PASSWORD, $this->SALT, 2048, 128);
	}

	// tearDown() 
	// use it to delete the test record and disconnect from mySQL
	public function tearDown() {
		// delete the user 
		if($this->user !== null) {
			$this->user->delete($this->mysqli);
			$this->user = null;
		}

		// disconnect from mySQL
		if($this->mysqli !== null) {
			$this->mysqli->close();
		}
	}

	// test creating a new User and inserting it to mySQL
	public function testInsertNewUser() {
		// verify mySQL connected OK
		$this->assertNotNull($this->mysqli);

		// create a user to post to mySQL
		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);

		// insert the user to mySQL
		$this->user->insert($this->mysqli);

		// compare the fields
		$this->assertNotNull($this->user->getUserId());
		$this->assertTrue($this->user->getUserId() > 0);
		$this->assertIdentical($this->user->getEmail(),               $this->EMAIL);
		$this->assertIdentical($this->user->getPassword(),            $this->HASH);
		$this->assertIdentical($this->user->getSalt(),                $this->SALT);
		$this->assertIdentical($this->user->getAuthenticationToken(), $this->AUTH_TOKEN);
	}

	// test updating a User in mySQL
	public function testUpdateUser() {
		// verify mySQL connected 
		$this->assertNotNull($this->mysqli);

		// create a user to post to mySQL
		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);

		// insert the user to mySQL
		$this->user->insert($this->mysqli);

		// update the user and post the changes to mySQL
		$newEmail = "jake@cortez.org.mx";
		$this->user->setEmail($newEmail);
		$this->user->update($this->mysqli);

		// compare the fields
		$this->assertNotNull($this->user->getUserId());
		$this->assertTrue($this->user->getUserId() > 0);
		$this->assertIdentical($this->user->getEmail(),               $newEmail);
		$this->assertIdentical($this->user->getPassword(),            $this->HASH);
		$this->assertIdentical($this->user->getSalt(),                $this->SALT);
		$this->assertIdentical($this->user->getAuthenticationToken(), $this->AUTH_TOKEN);
	}

	// test deleting a User
	public function testDeleteUser() {
		// verify mySQL connected 
		$this->assertNotNull($this->mysqli);

		// create a user to post to mySQL
		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);

		// insert the user to mySQL
		$this->user->insert($this->mysqli);

		// verify the User was inserted
		$this->assertNotNull($this->user->getUserId());
		$this->assertTrue($this->user->getUserId() > 0);

		// delete the user
		$this->user->delete($this->mysqli);
		$this->user = null;

		//  try to get user and say we didn't get a thing
		$hopefulUser = User::getUserByEmail($this->mysqli, $this->EMAIL);
		$this->assertNull($hopefulUser);
	}

	// test grabbing a User from mySQL
	public function testGetUserByEmail() {
		// verify mySQL connected 
		$this->assertNotNull($this->mysqli);

		// create a user to post to mySQL
		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);

		// insert the user to mySQL
		$this->user->insert($this->mysqli);

		// get the user using the static method
		$staticUser = User::getUserByEmail($this->mysqli, $this->EMAIL);

		// compare the fields
		$this->assertNotNull($staticUser->getUserId());
		$this->assertTrue($staticUser->getUserId() > 0);
		$this->assertIdentical($staticUser->getUserId(),              $this->user->getUserId());
		$this->assertIdentical($staticUser->getEmail(),               $this->EMAIL);
		$this->assertIdentical($staticUser->getPassword(),            $this->HASH);
		$this->assertIdentical($staticUser->getSalt(),                $this->SALT);
		$this->assertIdentical($staticUser->getAuthenticationToken(), $this->AUTH_TOKEN);
	}
}
 
 ?>
 /
  Created by PhpStorm.
  User: Leonard
  Date: 11/5/2014
  Time: 3:27 PM
 /
