<?php

class user {

	private $userId;

	private $email;

	private $passwordHash;

	private $salt;

	private $authenticationToken;


	public function __construct($newUserId, $newEmail, $newPasswordHash, $newSalt, $newAuthenticationToken) {
		try {
			$this->setUserId($newUserId);
			$this->setEmail($newEmail);
			$this->setPassword($newPasswordHash);
			$this->setSalt($newSalt);
			$this->setAuthenticationToken($newAuthenticationToken);
		} catch(UnexpectedValueException $unexpectedValue) {

			throw(new UnexpectedValueException("Unable to construct User", 0, $unexpectedValue));
		} catch(RangeException $range) {

			throw(new RangeException("Unable to construct User", 0, $range));
		}
	}


	public function getUserId() {
		return($this->userId);
	}


	public function setUserId($newUserId) {

		if($newUserId === null) {
			$this->userId = null;
			return;
		}

		if(filter_var($newUserId, FILTER_VALIDATE_INT) === false) {
			throw(new UnexpectedValueException("user id $newUserId is not numeric"));
		}


		$newUserId = intval($newUserId);
		if($newUserId <= 0) {
			throw(new RangeException("user id $newUserId is not positive"));
		}


		$this->userId = $newUserId;
	}


	public function getEmail() {
		return($this->email);
	}


	public function setEmail($newEmail) {

		$newEmail = trim($newEmail);
		if(($newEmail = filter_var($newEmail, FILTER_SANITIZE_EMAIL)) == false) {
			throw(new UnexpectedValueException("email $newEmail does not appear to be an email address"));
		}


		$this->email = $newEmail;
	}


	public function getPassword() {
		return($this->password);
	}



	public function setPassword($newPassword) {

		$newPassword   = trim($newPassword);
		$newPassword   = strtolower($newPassword);
		$filterOptions = array("options" => array("regexp" => "/^[\da-f]{128}$/"));
		if(filter_var($newPassword, FILTER_VALIDATE_REGEXP, $filterOptions) === false) {
			throw(new RangeException("password is not a valid SHA512 PBKDF2 hash"));
		}


		$this->password = $newPassword;
	}


	public function getSalt() {
		return($this->salt);
	}


	public function setSalt($newSalt) {

		$newSalt   = trim($newSalt);
		$newSalt   = strtolower($newSalt);
		$filterOptions = array("options" => array("regexp" => "/^[\da-f]{64}$/"));
		if(filter_var($newSalt, FILTER_VALIDATE_REGEXP, $filterOptions) === false) {
			throw(new RangeException("salt is not 64 hexadecimal bytes"));
		}


		$this->salt = $newSalt;
	}


	public function getAuthenticationToken() {
		return($this->authenticationToken);
	}


	public function setAuthenticationToken($newAuthenticationToken) {

		if($newAuthenticationToken === null) {
			$this->authenticationToken = null;
			return;
		}


		$newAuthenticationToken   = trim($newAuthenticationToken);
		$newAuthenticationToken   = strtolower($newAuthenticationToken);
		$filterOptions = array("options" => array("regexp" => "/^[\da-f]{32}$/"));
		if(filter_var($newAuthenticationToken, FILTER_VALIDATE_REGEXP, $filterOptions) === false) {
			throw(new RangeException("authentication token is not 32 hexadecimal bytes"));
		}


		$this->authenticationToken = $newAuthenticationToken;
	}


	public function insert(&$mysqli) {

		if(gettype($mysqli) !== "object" || get_class($mysqli) !== "mysqli") {
			throw(new mysqli_sql_exception("input is not a mysqli object"));
		}


		if($this->userId !== null) {
			throw(new mysqli_sql_exception("not a new user"));
		}


		$query     = "INSERT INTO user(email, password, salt, authenticationToken) VALUES(?, ?, ?, ?)";
		$statement = $mysqli->prepare($query);
		if($statement === false) {
			throw(new mysqli_sql_exception("Unable to prepare statement"));
		}


		$wasClean = $statement->bind_param("ssss", $this->email, $this->password,
			$this->salt,  $this->authenticationToken);
		if($wasClean === false) {
			throw(new mysqli_sql_exception("Unable to bind parameters"));
		}


		if($statement->execute() === false) {
			throw(new mysqli_sql_exception("Unable to execute mySQL statement"));
		}


		$this->userId = $mysqli->insert_id;
	}


	public function delete(&$mysqli) {

		if(gettype($mysqli) !== "object" || get_class($mysqli) !== "mysqli") {
			throw(new mysqli_sql_exception("input is not a mysqli object"));
		}


		if($this->userId === null) {
			throw(new mysqli_sql_exception("Unable to delete a user that does not exist"));
		}


		$query     = "DELETE FROM user WHERE userId = ?";
		$statement = $mysqli->prepare($query);
		if($statement === false) {
			throw(new mysqli_sql_exception("Unable to prepare statement"));
		}


		$wasClean = $statement->bind_param("i", $this->userId);
		if($wasClean === false) {
			throw(new mysqli_sql_exception("Unable to bind parameters"));
		}


		if($statement->execute() === false) {
			throw(new mysqli_sql_exception("Unable to execute mySQL statement"));
		}
	}


	public function update(&$mysqli) {

		if(gettype($mysqli) !== "object" || get_class($mysqli) !== "mysqli") {
			throw(new mysqli_sql_exception("input is not a mysqli object"));
		}


		if($this->userId === null) {
			throw(new mysqli_sql_exception("Unable to update a user that does not exist"));
		}


		$query     = "UPDATE user SET email = ?, password = ?, salt = ?, authenticationToken = ? WHERE userId = ?";
		$statement = $mysqli->prepare($query);
		if($statement === false) {
			throw(new mysqli_sql_exception("Unable to prepare statement"));
		}


		$wasClean = $statement->bind_param("ssssi", $this->email, $this->password,
			$this->salt,  $this->authenticationToken,
			$this->userId);
		if($wasClean === false) {
			throw(new mysqli_sql_exception("Unable to bind parameters"));
		}


		if($statement->execute() === false) {
			throw(new mysqli_sql_exception("Unable to execute mySQL statement"));
		}
	}


	public static function getUserByEmail(&$mysqli, $email) {

		if(gettype($mysqli) !== "object" || get_class($mysqli) !== "mysqli") {
			throw(new mysqli_sql_exception("input is not a mysqli object"));
		}


		$email = trim($email);
		$email = filter_var($email, FILTER_SANITIZE_EMAIL);


		$query     = "SELECT userId, email, password, salt, authenticationToken FROM user WHERE email = ?";
		$statement = $mysqli->prepare($query);
		if($statement === false) {
			throw(new mysqli_sql_exception("Unable to prepare statement"));
		}


		$wasClean = $statement->bind_param("s", $email);
		if($wasClean === false) {
			throw(new mysqli_sql_exception("Unable to bind parameters"));
		}


		if($statement->execute() === false) {
			throw(new mysqli_sql_exception("Unable to execute mySQL statement"));
		}


		$result = $statement->get_result();
		if($result === false) {
			throw(new mysqli_sql_exception("Unable to get result set"));
		}


		$row = $result->fetch_assoc();

		if($row !== null) {
			try {
				$user = new User($row["userId"], $row["email"], $row["password"], $row["salt"], $row["authenticationToken"]);
			}
			catch(Exception $exception){;
				throw(new mysqli_sql_exception("Unable to convert row to User", 0, $exception));
			}


			return($user);
		} else {
			return(null);
		}
	}
}
?>

<?php

require_once("/usr/lib/php5/simpletest/autorun.php");


require_once("../php/user.php");


class UserTest extends UnitTestCase {

	private $mysqli = null;

	private $user   = null;


	private $EMAIL      = "unit-test@example.net";
	private $PASSWORD   = "ChedGeek5";
	private $SALT       = null;
	private $AUTH_TOKEN = null;
	private $HASH       = null;


	public function setUp() {

		mysqli_report(MYSQLI_REPORT_STRICT);
		$this->mysqli = new mysqli("localhost", "store_dylan", "deepdive", "store_dylan");


		$this->SALT       = bin2hex(openssl_random_pseudo_bytes(32));
		$this->AUTH_TOKEN = bin2hex(openssl_random_pseudo_bytes(16));
		$this->HASH       = hash_pbkdf2("sha512", $this->PASSWORD, $this->SALT, 2048, 128);
	}


	public function tearDown() {

		if($this->user !== null) {
			$this->user->delete($this->mysqli);
			$this->user = null;
		}


		if($this->mysqli !== null) {
			$this->mysqli->close();
		}
	}


	public function testInsertNewUser() {

		$this->assertNotNull($this->mysqli);


		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);


		$this->user->insert($this->mysqli);


		$this->assertNotNull($this->user->getUserId());
		$this->assertTrue($this->user->getUserId() > 0);
		$this->assertIdentical($this->user->getEmail(),               $this->EMAIL);
		$this->assertIdentical($this->user->getPassword(),            $this->HASH);
		$this->assertIdentical($this->user->getSalt(),                $this->SALT);
		$this->assertIdentical($this->user->getAuthenticationToken(), $this->AUTH_TOKEN);
	}


	public function testUpdateUser() {

		$this->assertNotNull($this->mysqli);


		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);


		$this->user->insert($this->mysqli);


		$newEmail = "jake@cortez.org.mx";
		$this->user->setEmail($newEmail);
		$this->user->update($this->mysqli);


		$this->assertNotNull($this->user->getUserId());
		$this->assertTrue($this->user->getUserId() > 0);
		$this->assertIdentical($this->user->getEmail(),               $newEmail);
		$this->assertIdentical($this->user->getPassword(),            $this->HASH);
		$this->assertIdentical($this->user->getSalt(),                $this->SALT);
		$this->assertIdentical($this->user->getAuthenticationToken(), $this->AUTH_TOKEN);
	}


	public function testDeleteUser() {

		$this->assertNotNull($this->mysqli);


		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);


		$this->user->insert($this->mysqli);


		$this->assertNotNull($this->user->getUserId());
		$this->assertTrue($this->user->getUserId() > 0);


		$this->user->delete($this->mysqli);
		$this->user = null;


		$hopefulUser = User::getUserByEmail($this->mysqli, $this->EMAIL);
		$this->assertNull($hopefulUser);
	}


	public function testGetUserByEmail() {

		$this->assertNotNull($this->mysqli);


		$this->user = new User(null, $this->EMAIL, $this->HASH, $this->SALT, $this->AUTH_TOKEN);


		$this->user->insert($this->mysqli);


		$staticUser = User::getUserByEmail($this->mysqli, $this->EMAIL);


		$this->assertNotNull($staticUser->getUserId());
		$this->assertTrue($staticUser->getUserId() > 0);
		$this->assertIdentical($staticUser->getUserId(),              $this->user->getUserId());
		$this->assertIdentical($staticUser->getEmail(),               $this->EMAIL);
		$this->assertIdentical($staticUser->getPassword(),            $this->HASH);
		$this->assertIdentical($staticUser->getSalt(),                $this->SALT);
		$this->assertIdentical($staticUser->getAuthenticationToken(), $this->AUTH_TOKEN);
	}
}
?>

?>
/**
 * Created by PhpStorm.
 * User: Leonard
 * Date: 11/5/2014
 * Time: 3:27 PM
 */ 
